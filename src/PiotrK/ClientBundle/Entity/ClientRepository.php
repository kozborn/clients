<?php

namespace PiotrK\ClientBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends EntityRepository
{

  public function getClients() {
    $qb = $this->createQueryBuilder('q')
            ->select('q')
            ;

    $clients = new ArrayCollection($qb->getQuery()->getResult());
    return $clients;
  }


  public function getClientsFiltered($filters){
    $qb = $this->createQueryBuilder('q')
            ->select('q');

    if(isset($filters['page'])){
      unset($filters['page']);
    }

    $dateStart = isset($filters['dateStart']) ? new \DateTime($filters['dateStart']) : null;
    $dateEnd = isset($filters['dateEnd']) ? new \DateTime($filters['dateEnd']) : null;

    $costStart = isset($filters['costStart']) ? $filters['costStart'] : null;
    $costEnd = isset($filters['costEnd']) ? $filters['costEnd'] : null;

    if(isset($filters['name'])){
        $value = $filters['name'];
        $qb->andWhere("q.name LIKE :name");
        $qb->setParameter("name", '%'.$value.'%');
    }

    $clients = new ArrayCollection($qb->getQuery()->getResult());

    if($costStart){
      $clients = $clients->filter(function($client) use ($costStart){
        return $client->getTotalCost() > $costStart;
      });
    }

    if($costEnd){
      $clients = $clients->filter(function($client) use ($costEnd){
        return $client->getTotalCost() < $costEnd;
      });
    }

    if($dateStart){
      foreach($clients as $client){
        $from = $client->getOrders()->filter(function($order) use ($dateStart){
          $created = $order->getCreated();
          return $created->getTimestamp() > $dateStart->getTimestamp();
        });  
        if($from->count() == 0){
          $clients->removeElement($client);
        }
      }
    }

    if($dateEnd){
      foreach($clients as $client){
        $to = $client->getOrders()->filter(function($order) use ($dateEnd){
          $created = $order->getCreated();
          return $dateEnd->getTimestamp() > $created->getTimestamp();
        });  
        if($to->count() == 0){
          $clients->removeElement($client);
        }
      }
    }

    return $clients;
  }

}
